local function createUI()
	--selene:allow(incorrect_standard_library_use)
	local ui = loadstring(game:HttpGet("https://raw.githubusercontent.com/NOTNONG/farmy/main/makeUI"))()
	ui.Parent = game.CoreGui
	return ui
end

return function(config, saved)
	if not saved then
		saved = {}
	end
	--
	config = table.clone(config)
	local control = {} :: { saveChanged: () -> ()? }
	local save = {}
	control.save = save
	local janitorList = {}

	--fundamental functions
	local function janitor<T>(object: T): T
		table.insert(janitorList, object)
		return object
	end

	local function saveChanged()
		if control.saveChanged then
			task.spawn(control.saveChanged)
		end
	end

	--instances
	local uiInstance = createUI()
	janitor(uiInstance)
	control.instance = uiInstance

	local main = uiInstance.Main
	local pages = main.Pages
	local infoPage = pages.Information
	local featuresPage = pages.Features
	local pageLayout = main.Pages.UIPageLayout
	local notifications = uiInstance.Notifications

	local currentPage = 1
	local pagesIndex = {}

	--sort pages and make indexes table
	do
		for _, pageInstance in pairs(main.Pages:GetChildren()) do
			if pageInstance:IsA("Frame") then
				table.insert(pagesIndex, pageInstance)
			end
		end
		table.sort(pagesIndex, function(a, b)
			return a.LayoutOrder < b.LayoutOrder
		end)
	end

	--notifications
	do
		local template = notifications.Template

		control.notify = function(message: string, duration: number)
			local this = template:Clone()
			this.Content.Text = message
			this.Visible = true
			this.Parent = notifications

			if duration then
				task.delay(duration, this.Destroy, this)
			end
			this.Close.Activated:Connect(function()
				this:Destroy()
			end)
		end
	end

	--sidebar
	do
		local sidebar = main.Sidebar
		local template = sidebar.List.Template
		local highlight = sidebar.SelectedHighlight
		local sidebarMask = Instance.new("Frame")
		sidebarMask.ClipsDescendants = true
		sidebarMask.BackgroundTransparency = 1
		sidebarMask.Size = UDim2.fromScale(1, 1)
		sidebarMask.Name = "Mask"
		sidebarMask.Parent = sidebar
		highlight.Parent = sidebarMask
		pageLayout.ScrollWheelInputEnabled = false
		template.Visible = false

		local function sidebarItem(name: string)
			local this = template:Clone()
			this.Name = name
			this.TextLabel.Text = name
			this.Visible = true
			this.Parent = sidebar.List
			return this
		end

		for index, page in pairs(pagesIndex) do
			sidebarItem(page.Name).Activated:Connect(function()
				if currentPage ~= index then
					currentPage = index
					pageLayout:JumpTo(page)
					local yPos = template.Size.Y.Scale * (index - 1)
					highlight.Position = UDim2.fromScale(0, yPos)
				end
			end)
		end

		local bottom = sidebar.Bottom.Frame
		--mode switch
		--selene:allow(shadowing)
		do
			control.mode = "None"

			local mode = bottom.Mode
			local template = mode.Expanded.Item
			template.Visible = false
			table.insert(config.modes, "None")

			local modeChanged
			local function fireModeChanged()
				if modeChanged then
					task.spawn(modeChanged, control.mode)
				end
			end

			control.handleModeChange = function(func)
				modeChanged = func
				fireModeChanged()
			end

			local function setMode(name)
				if control.mode ~= name then
					control.mode = name
					mode.TextLabel.Text = `Mode: {name}`

					fireModeChanged()

					save.mode = name
					saveChanged()
				end
			end

			local function switch()
				mode.Expanded.Visible = not mode.Expanded.Visible
			end

			for _, name in pairs(config.modes) do
				local item = template:Clone()
				item.Visible = true
				item.Name = name
				item.TextLabel.Text = name
				item.Parent = mode.Expanded
				item.Activated:Connect(function()
					setMode(name)
					switch()
				end)
			end

			mode.Activated:Connect(function()
				switch()
			end)

			if saved.mode and table.find(config.modes, saved.mode) then
				setMode(saved.mode)
			end

			control.setMode = setMode
		end

		--minimize
		do
			local minimized = false
			local hiddenButton = uiInstance.Hidden
			local function switch()
				minimized = not minimized
				main.Visible = minimized
				uiInstance.Cover.Visible = minimized
				hiddenButton.Visible = not minimized
			end

			bottom.Minimize.Activated:Connect(switch)
			hiddenButton.Button.Activated:Connect(switch)
		end
	end

	--info page
	do
		local textLabels = {}
		local info = {}
		local labels = infoPage.Container2.Fill.Labels
		local template = labels.Template
		template.Visible = false

		local function newLabel(name, title)
			local this = template:Clone()
			this.Name = name
			this.Title.Text = `{title}:`
			this.Value.Text = "..."
			this.Visible = true
			info[name] = ""
			textLabels[name] = this.Value
			this.Parent = labels
			return this
		end

		for i, v in pairs(config.labels) do
			newLabel(v.name, v.title).LayoutOrder = i
		end

		for _, item in pairs(infoPage.Container1.List:GetChildren()) do
			if item:IsA("Frame") then
				info[item.Name] = "..."
				textLabels[item.Name] = item.Fill.Content.Label
				textLabels[item.Name].Text = "..."
			end
		end

		control.info = (
			setmetatable({}, {
				__newindex = function(_, k, v)
					if not info[k] then
						return warn(`{k} doesn't exist in info`)
					end
					info[k] = v
					textLabels[k].Text = v
				end,
				__index = info,
			}) :: any
		) :: { [string]: string? }
	end

	--features page
	do
		local features = {}
		control.features = features
		local frame = featuresPage.Frame

		frame.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			featuresPage.Scroller.CanvasSize =
				UDim2.fromOffset(0, frame.UIListLayout.AbsoluteContentSize.Y + uiInstance.AbsoluteSize.Y * 0.1)
		end)
		featuresPage.Scroller:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
			frame.Position = UDim2.fromOffset(0, -featuresPage.Scroller.CanvasPosition.Y)
		end)

		local templates = {}
		for _, template in pairs(frame:GetChildren()) do
			if template:IsA("Frame") then
				template.Visible = false
				templates[template.Name] = template
			end
		end

		local componentMeta = {
			spawnCallback = function(self, ...)
				if self.callback then
					task.spawn(self.callback, ...)
				end
			end,
			__newindex = function(self, k, v)
				rawset(self, k, v)
				if k == "callback" then
					if self.fireCallback then
						self.fireCallback()
					end
				end
			end,
		}
		componentMeta.__index = componentMeta

		local handlers = {}
		handlers.Button = function(self, component: typeof(frame.Button), data)
			component.FillTitle.Label.Text = data.title

			local prevFeedback
			component.Button.Activated:Connect(function()
				if type(self.callback) == "function" then
					self:spawnCallback()

					if prevFeedback then
						task.cancel(prevFeedback)
					end
					prevFeedback = task.spawn(function()
						component.Button.Label.Text = "Activated!"
						task.wait(0.5)
						component.Button.Label.Text = "Activate"
					end)
				else
					warn(`Button {data.name} has no callback`)
				end
			end)
		end

		handlers.Switch = function(self, component: typeof(frame.Switch), data)
			component.FillTitle.Label.Text = data.title
			local states = component.ButtonHolder
			local colors = {
				[true] = {
					states.On.BackgroundColor3,
					states.On.Label.TextColor3,
					states.On.Underline.BackgroundColor3,
				},
				[false] = {
					states.On.BackgroundColor3,
					states.Off.Label.TextColor3,
					states.Off.Underline.BackgroundColor3,
				},
			}

			self.fireCallback = function()
				self:spawnCallback(self.value)
			end

			local switched
			local function switch(bool)
				if switched ~= bool then
					switched = bool
					self.value = switched

					self.fireCallback()

					for _, state in pairs(states:GetChildren()) do
						local i = switched
						if state.Name == "Off" then
							i = not i
						end
						state.BackgroundColor3 = colors[i][1]
						state.Label.TextColor3 = colors[i][2]
						state.Underline.BackgroundColor3 = colors[i][3]
					end

					if not data.noSave then
						save[data.name] = switched
						saveChanged()
					end
				end
			end

			local savedValue = saved[data.name]
			switch(
				if not data.noSave and savedValue ~= nil
					then savedValue
					else (if data.default then data.default else true)
			)
			states.On.Activated:Connect(function()
				switch(true)
			end)
			states.Off.Activated:Connect(function()
				switch(false)
			end)
		end

		handlers.Dropdown = function(self, component: typeof(frame.Dropdown), data)
			component.FillTitle.Label.Text = data.title

			self.fireCallback = function()
				self:spawnCallback(self.value)
			end

			local choices = {}
			local expanded = component.Expanded
			local itemsHolder = expanded.Below.Frame.Holder
			local template = itemsHolder.Item
			template.Visible = false

			local switched = false
			local function switch()
				switched = not switched
				expanded.Visible = switched
			end

			local function choose(choice)
				if choices[choice] then
					self.value = choice
					component.Expand.Label.Text = choice

					self.fireCallback()

					if not data.noSave then
						save[data.name] = choice
						saveChanged()
					end
				else
					warn(`choice {choice} doesn't exist`)
				end
			end

			for _, choice in pairs(data.choices) do
				if not choices[choice] then
					choices[choice] = true
					local item = template:Clone()
					item.Label.Text = choice
					item.Name = choice
					item.Visible = true
					item.Parent = itemsHolder
					item.Activated:Connect(function()
						choose(choice)
						if switched then
							switch()
						end
					end)

					if not self.value then
						choose(choice)
					end
				end
			end

			component.Expand.Activated:Connect(switch)
			self.choose = choose
			if not data.noSave then
				local savedChoice = saved[data.name]
				if savedChoice and choices[savedChoice] then
					choose(savedChoice)
				end
			end
		end

		local function filter(name, query)
			if string.find(string.lower(name), string.lower(query)) then
				return true
			end
		end

		handlers.TextField = function(self, component: typeof(frame.TextField), data)
			component.FillTitle.Label.Text = data.title

			local textBox = component.Field.Box

			self.fireCallback = function()
				self:spawnCallback(self.value)
			end

			local function format(text)
				if data.format then
					text = data.format(text)
				end
				return text
			end

			local current = format((not data.noSave and saved[data.name]) or data.default or "")
			local function update()
				textBox.Text = current
				self.value = current
				self.fireCallback()
				if not data.noSave then
					save[data.name] = current
					saveChanged()
				end
			end

			textBox.Text = current
			textBox.FocusLost:Connect(function(entered)
				if entered then
					current = format(textBox.Text)
					update()
				else
					textBox.Text = current
				end
			end)
			update()
		end

		handlers.Sheet = function(self, component: typeof(frame.Sheet), data)
			local list = {}
			local savedRows
			if not data.noSave then
				save[data.name] = {}
				savedRows = saved[data.name]
			end

			local searchBox = component.Top.Search.Label
			local rows = component.Rows
			local columnHeader = component.ColumnHeader
			local cellTemplates = {}
			janitor(function()
				table.clear(cellTemplates)
			end)

			component.Top.TitleHolder.Label.Text = data.title
			columnHeader.Cells.Template.Visible = false
			columnHeader.Title.Label.Text = data.entryName
			rows.Template.Visible = false

			for _, cellTemplate in pairs(rows.Template.Cells:GetChildren()) do
				if not cellTemplate:IsA("UIListLayout") then
					cellTemplates[cellTemplate.Name] = cellTemplate
					cellTemplate.Parent = nil
				end
			end

			for i, column in pairs(data.columns) do
				local this = columnHeader.Cells.Template:Clone()
				this.Visible = true
				this.Label.Text = column.title
				this.LayoutOrder = #data.columns + 1 - i
				this.Parent = columnHeader.Cells
			end

			self.get = function(row, column)
				return list[row].cells[column]
			end
			self.set = function(row, column, value)
				list[row].cells[column] = value
				if not data.noSave then
					save[data.name][row][column] = value
				end
				self:spawnCallback(row, column, value)
			end

			local function addRow(info)
				local this = rows.Template:Clone()
				this.Visible = true
				this.Label.Text = info.title
				this.Parent = rows
				local row = { cells = {}, defaults = {}, instance = this, title = info.title }
				list[info.name] = row
				if not data.noSave then
					save[data.name][info.name] = {}
				end

				for i, column in pairs(data.columns) do
					local kind = column.kind
					local cell = cellTemplates[kind]:Clone()
					cell.LayoutOrder = #data.columns + 1 - i

					local default = column.default
					if info.cells and info.cells[column.name] ~= nil then
						default = info.cells[column.name]
					end

					local function getValue()
						return self.get(info.name, column.name)
					end

					local function setValue(value)
						self.set(info.name, column.name, value)
					end

					local initValue = default
					if savedRows and savedRows[info.name] and savedRows[info.name][column.name] ~= nil then
						initValue = savedRows[info.name][column.name]
					end

					if kind == "Checkbox" then
						if default == nil then
							default = false
						end

						local checkbox = cell.Checkbox
						local function toggle(bool)
							if bool == nil then
								bool = default
							end
							setValue(bool)
							checkbox[tostring(bool)].Visible = true
							checkbox[tostring(not bool)].Visible = false
						end

						toggle(initValue)
						checkbox.Activated:Connect(function()
							local newValue = not getValue()
							toggle(newValue)
						end)
					elseif kind == "TextField" then
						if not default then
							default = "Text field"
						end

						local textBox = cell.Box :: TextBox
						local function setText(text)
							if column.format then
								text = column.format(text)
							end
							textBox.Text = text
							setValue(text)
						end

						textBox.FocusLost:Connect(function(entered)
							if entered then
								setText(textBox.Text)
							else
								textBox.Text = getValue()
							end
						end)

						setText(if initValue ~= nil then initValue else default)
					end

					row.defaults[column.name] = default
					cell.Parent = this.Cells
				end
			end

			local function removeRow(name)
				local row = list[name]
				row.instance:Destroy()
				list[name] = nil
			end

			if data.default then
				for _, row in pairs(data.default) do
					addRow(row)
				end
			end

			searchBox.FocusLost:Connect(function(entered)
				if not entered then
					searchBox.Text = ""
				end

				for name, row in pairs(list) do
					row.instance.Visible = filter(row.title, searchBox.Text)
				end
			end)

			self.fireCallback = function()
				for name, row in pairs(list) do
					for column, value in pairs(row.cells) do
						self:spawnCallback(name, column, value)
					end
				end
			end

			self.getDefault = function(row, column)
				return list[row].defaults[column]
			end
			self.add = addRow
			self.remove = removeRow
			self.getAll = function()
				local clone = {}
				for i, v in pairs(list) do
					clone[i] = table.clone(v.cells)
				end
				return clone
			end
			self.removeAll = function()
				for name, _ in pairs(list) do
					removeRow(name)
				end
			end
		end

		--[[handlers.Checklist = function(self, component: typeof(frame.Checklist), data)
			local list = {}
			if not data.noSave then
				save[data.name] = {}
			end

			local searchBox = component.Top.Search.Label
			local content = component.Content
			local template = content.Item
			template.Visible = false
			component.Top.TitleHolder.Label.Text = data.title

			local function toggle(name, bool, noCallback)
				list[name].value = bool

				local checkbox = list[name].instance.Checkbox
				checkbox[tostring(bool)].Visible = true
				checkbox[tostring(not bool)].Visible = false

				if not noCallback then
					self:spawnCallback(name, bool)
				end

				if not data.noSave then
					save[data.name][name] = bool
					saveChanged()
				end
			end

			local function add(name, title, default)
				if list[name] == nil then
					local item = template:Clone()
					item.Visible = filter(title, searchBox.Text)
					item.Label.Text = title
					item.Name = name
					item.Parent = content
					list[name] = { title = title, instance = item }
					toggle(name, default, true)
					item.Checkbox.Activated:Connect(function()
						toggle(name, not list[name].value)
					end)
				end
			end

			searchBox.FocusLost:Connect(function(entered)
				if not entered then
					searchBox.Text = ""
				end

				for _, v in pairs(list) do
					v.instance.Visible = filter(v.title, searchBox.Text)
				end
			end)

			self.get = function(name)
				return list[name]
			end
			self.getAll = function()
				local result = {}
				for name, v in pairs(list) do
					result[name] = v.value
				end
				return result
			end
			self.add = function(name, title, default)
				if data.noSave then
					add(name, title, default)
				else
					warn(`can't add {name} to saveable checklist {data.name}`)
				end
			end
			self.set = function(name, value)
				if list[name] ~= nil then
					toggle(name, value)
				end
			end

			local function canRemove()
				if not data.noSave then
					warn(`can't remove from saveable checklist {data.name}`)
					return
				end
				return true
			end

			local function remove(name)
				list[name].instance:Destroy()
				list[name] = nil
			end

			self.remove = function(name)
				if canRemove() then
					if list[name] ~= nil then
						remove(name)
					end
				end
			end
			self.removeAll = function()
				if canRemove() then
					for name, _ in pairs(list) do
						remove(name)
					end
				end
			end

			for name, v in pairs(data.default) do
				local savedValue = saved[data.name] and saved[data.name][name]
				add(name, v.title, if savedValue ~= nil then savedValue else v.default)
			end
			
			self.fireCallback = function()
				for name, v in pairs(list) do
					self:spawnCallback(name, v.value)
				end
			end
		end--]]

		--[[handlers.List = function(self, component: typeof(frame.List), data)
			local list = {}
			if not data.noSave then
				save[data.name] = list
			end

			local instanceList = {}
			local searchBox = component.Top.Search.Label
			local content = component.Content
			local template = content.Item
			template.Visible = false
			component.Top.TitleHolder.Label.Text = data.title

			local function remove(name)
				list[name] = nil
				instanceList[name]:Destroy()
				instanceList[name] = nil
				self:spawnCallback(name, false)
				if not data.noSave then
					saveChanged()
				end
			end

			local function add(name)
				if list[name] then
					warn(`item {name} already exists in list {data.name}`)
				else
					local item = template:Clone()
					item.Visible = filter(name, searchBox.Text)
					item.Label.Text = name
					item.Name = name
					item.Parent = content
					list[name] = true
					instanceList[name] = item

					self:spawnCallback(name, true)
					if not data.noSave then
						saveChanged()
					end

					item.Delete.Activated:Connect(function()
						remove(name)
					end)
				end
			end

			searchBox.FocusLost:Connect(function(entered)
				if not entered then
					searchBox.Text = ""
				end

				for name, item in pairs(instanceList) do
					item.Visible = filter(name, searchBox.Text)
				end
			end)

			local addBox = component.Top.Add.Label
			addBox.FocusLost:Connect(function(entered)
				if entered then
					add(addBox.Text)
				end
				addBox.Text = ""
			end)

			self.get = function(name)
				return list[name]
			end
			self.getAll = function()
				return table.clone(list)
			end
			self.add = add
			self.remove = function(name)
				if list[name] ~= nil then
					remove(name)
				end
			end
			self.removeAll = function()
				for name, _ in pairs(list) do
					remove(name)
				end
			end

			for name, _ in pairs((if data.noSave then nil else saved[data.name]) or data.default) do
				add(name)
			end
			
			self.fireCallback = function()
				for name, _ in pairs(list) do
					self:spawnCallback(name, true)
				end
			end
		end--]]

		local i = 1
		for _, v in pairs(config.features.sections) do
			i += 1
			local section = templates.Section:Clone()
			section.Fill.Label.Text = v.title
			section.Visible = true
			section.LayoutOrder = i
			section.Parent = frame
			local components = {}

			for _, item in pairs(v.components) do
				if features[item.name] ~= nil then
					warn(`{item.name} repeated`)
					continue
				end

				local template = templates[item.component]
				if template then
					local component = template:Clone()
					component.Visible = true
					component.LayoutOrder = i
					component.Parent = frame
					table.insert(components, component)

					local this = setmetatable({}, componentMeta)
					features[item.name] = this
					handlers[item.component](this, component, item)
				else
					warn(`{item.component} doesn't exist`)
				end
			end

			local expanded = true
			section.Fill.Expand.Activated:Connect(function()
				expanded = not expanded
				section.Fill.Expand.Rotation = if expanded then 0 else 180
				for _, component in pairs(components) do
					component.Visible = expanded
				end
			end)
		end
	end

	--traits page
	do
		local traitsPage = pages.Traits
		control.traits = {}

		local interactables: { GuiButton } = {}
		local currentTrait
		local currentHand
		local handCards = {}
		local remainingHands = {}

		local discardingRest = false
		local prompting = false
		local viewing = "traitHand"

		local prompt = traitsPage.Prompt
		local area = traitsPage.Area
		local actions = traitsPage.Actions
		local cards = area.Cards
		local empty = area.Empty
		local template = cards.Template
		template.Visible = false

		local function interactable(v)
			table.insert(interactables, v)
		end

		local function cloneTemplate()
			local this = template:Clone()
			this.Visible = true
			this.Bonuses.Stat:Destroy()
			this.Parent = cards
			return this
		end

		local function updateCard(card, info)
			local title = `{info.title} ({info.rarity})`
			if info.valuable then
				title = `!!! {title} !!!`
			end
			card.Title.Label.Text = title
			card.Description.TextLabel.Text = info.description
			card.Darken.Visible = not info.valuable
			for _, child in pairs(card.Bonuses:GetChildren()) do
				if child.Name == "Stat" then
					child:Destroy()
				end
			end

			if info.bonuses then
				for category, value in pairs(info.bonuses) do
					local stat = template.Bonuses.Stat:Clone()
					stat.Visible = true
					stat.TextLabel.Text = `{category}: {value}`
					stat.Parent = card.Bonuses
				end
			end
		end

		local function toggleHandActions(bool)
			if not discardingRest then
				for _, card in pairs(handCards) do
					card.Holder.Visible = bool
				end
				actions.discard.Visible = bool
				actions.discardRest.Visible = bool
			end
		end

		local waitingNext
		local function stopWaitingNext()
			if waitingNext then
				task.cancel(waitingNext)
				waitingNext = nil
			end
		end

		local function stopDiscardingRest()
			stopWaitingNext()
			discardingRest = false
			traitsPage.DiscardingRest.Visible = false
			if currentHand then
				toggleHandActions(true)
			end
		end

		local currentCard = cloneTemplate()
		currentCard.Visible = false
		currentCard.Holder:Destroy()

		local function updateViewSwitcherText()
			actions.switchView.TextLabel.Text = if viewing == "currentTrait"
				then `View Trait Hand`
				else `View Current ({if currentTrait then currentTrait.title else "None"})`
		end

		local function updateView(new)
			if new ~= viewing then
				viewing = new
				if viewing == "traitHand" then
					empty.Visible = currentHand == nil
					cards.Visible = currentHand ~= nil
					toggleHandActions(currentHand ~= nil)
				elseif viewing == "currentTrait" then
					if not currentHand then
						empty.Visible = false
						cards.Visible = true
					else
						toggleHandActions(false)
					end
				end

				for _, card in pairs(handCards) do
					card.Visible = viewing ~= "currentTrait"
				end
				currentCard.Visible = viewing == "currentTrait"

				updateViewSwitcherText()
			end
		end

		actions.switchView.Activated:Connect(function()
			if currentTrait then
				if viewing == "currentTrait" then
					updateView("traitHand")
				elseif viewing == "traitHand" then
					updateView("currentTrait")
				end
			end
		end)
		interactable(actions.switchView)

		local function emptied()
			currentHand = nil
			if viewing == "traitHand" then
				empty.Visible = true
				cards.Visible = false
				toggleHandActions(false)
			end
		end

		control.traits.updateCurrent = function(info)
			if info and currentTrait and info.uuid ~= currentTrait.uuid then
				remainingHands = {}
				emptied()
				stopDiscardingRest()
			end

			currentTrait = info
			updateViewSwitcherText()
			actions.switchView.Visible = currentTrait ~= nil
			if currentTrait then
				updateCard(currentCard, info)
			else
				updateView("traitHand")
			end
		end

		local complete
		local function fire(name, ...)
			local func = control.traits[`fire{string.gsub(name, "^%l", string.upper)}`]
			if func then
				local success, result = pcall(func, ...)
				if not success then
					control.notify(`Can't {name} because of this error: {result}`)
				end
				return success
			end
		end

		local function discard()
			toggleHandActions(false)
			if fire("discard") then
				complete()
			else
				toggleHandActions(true)
			end
		end

		local function togglePrompt(bool)
			prompting = bool
			prompt.Visible = bool
			for _, v in pairs(interactables) do
				v.Interactable = not bool
			end
		end

		local function showPrompt(text)
			if not prompting then
				local current = coroutine.running()
				togglePrompt(true)
				prompt.Frame.Content.Text = text

				local signalMaid: { RBXScriptSignal } = {}
				local function addTask(v)
					table.insert(signalMaid, v)
				end
				local function close(result)
					for _, v in pairs(signalMaid) do
						v:Disconnect()
					end
					togglePrompt(false)
					task.spawn(current, result)
				end

				local choices = prompt.Frame.Choices
				addTask(choices.Yes.Activated:Connect(function()
					close(true)
				end))
				addTask(choices.No.Activated:Connect(function()
					close(false)
				end))
				addTask(pageLayout.PageLeave:Connect(function(page)
					if page == traitsPage then
						close(false)
					end
				end))

				return coroutine.yield()
			end
		end

		local function triggerDiscard()
			local vaulables = {}
			for _, info in pairs(currentHand) do
				if info.valuable then
					table.insert(vaulables, `"{info.title}" ({info.rarity})`)
				end
			end

			if #vaulables >= 1 then
				local str =
					`{#vaulables} valuable trait{if #vaulables > 1 then "s" else ""}: {table.concat(vaulables, ", ")}`
				if discardingRest then
					control.notify(`Stopped discarding due to {str}.`, 3)
					stopDiscardingRest()
					return
				end

				if not showPrompt(`Do you want to discard these traits which contain {str}?`) then
					return
				end
			end

			discard()
		end

		complete = function()
			emptied()

			if discardingRest then
				waitingNext = task.delay(0.5, function()
					waitingNext = nil
					control.notify("Discard completed.", 1)
					stopDiscardingRest()
				end)
			end

			if #remainingHands > 0 then
				control.traits.handle(remainingHands[1])
				table.remove(remainingHands, 1)
				if discardingRest then
					triggerDiscard()
				end
			end
		end

		for i = 1, 3 do
			local this = cloneTemplate()
			this.Holder.ImageButton.Activated:Connect(function()
				if currentHand and currentHand[i] then
					if showPrompt(`Do you want to pick "{currentHand[i].title}" ({currentHand[i].rarity})?`) then
						toggleHandActions(false)
						if fire("pick", i) then
							control.traits.updateCurrent(currentHand[i])
							complete()
						else
							toggleHandActions(true)
						end
					end
				end
			end)
			interactable(this.Holder.ImageButton)
			handCards[i] = this
		end

		actions.discard.Activated:Connect(triggerDiscard)
		interactable(actions.discard)

		actions.discardRest.Activated:Connect(function()
			if showPrompt("Do you want to start automatically discarding the rest of your trait hands?") then
				toggleHandActions(false)
				discardingRest = true
				traitsPage.DiscardingRest.Visible = true
				triggerDiscard()
			end
		end)
		interactable(actions.discardRest)

		control.traits.handle = function(traitsInfo)
			stopWaitingNext()

			if not currentHand then
				local pity, pityAt = control.traits.getPity()
				traitsPage.Pity.TextLabel.Text = `Pity: {pity}/{pityAt}`

				currentHand = traitsInfo
				for i, card in pairs(handCards) do
					updateCard(card, currentHand[i])
				end

				if viewing == "traitHand" then
					empty.Visible = false
					cards.Visible = true
					toggleHandActions(true)
				end
			else
				table.insert(remainingHands, traitsInfo)
			end
		end
	end

	control.clear = function()
		for _, object in pairs(janitorList) do
			if typeof(object) == "RBXScriptConnection" then
				object:Disconnect()
			elseif typeof(object) == "Instance" then
				if object:IsA("Tween") then
					object:Cancel()
				end
				object:Destroy()
			elseif typeof(object) == "function" then
				task.spawn(object)
			end
		end
	end

	return control
end
